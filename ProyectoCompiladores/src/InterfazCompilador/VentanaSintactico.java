/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazCompilador;

import LogicaCompilador.AFD;
import LogicaCompilador.AFN;
import LogicaCompilador.AnalizadorLexico;
import LogicaCompilador.GeneradorAnalizadores;
import LogicaCompilador.GramaticaDeGramaticas;
import LogicaCompilador.LR0;
import LogicaCompilador.LR1;
import LogicaCompilador.ListaDeListas;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/**
 *
 * @author sandu
 */
public class VentanaSintactico extends javax.swing.JFrame {

    /**
     * Creates new form VentanaSintactico
     */
    private GeneradorAnalizadores gen;
    private GramaticaDeGramaticas gr;
    private AnalizadorLexico lex;
    private LinkedList<String[]> tablaDespliegue;
    private LR0 lr0;
    private LR1 lr1;
    private int alturaProvisional;
    public VentanaSintactico() {
        gen = new GeneradorAnalizadores();
        gen.setGeneradorAFN();
        
        //Gramaticas con posible recursividad a la izquierda
        AFN token10 = gen.generaAFN(gen.check("([A-Z]&[a-z]+)*&([A-Z])?|[A-Z]+|[a-z]+|\\+|\\-|\\*|/|\\(|\\)|\\&\\;| "));
        //gramaticas sin recursividad por la izquierda
        //AFN token10 = gen.generaAFN(gen.check("([A-Z]?&[a-z]+)*|[A-Z]|\\+|\\-|\\*|/|\\(|\\)|\\&\\;| "));
        token10.setToken(10);

        AFN token20 = gen.generaAFN(gen.check("\\-&>"));
        token20.setToken(20);

        AFN token30 = gen.generaAFN(gen.check(";"));
        token30.setToken(30);
        AFN token40 = gen.generaAFN(gen.check("\\|"));
        token40.setToken(40);
        AFN token50 = gen.generaAFN(gen.check("#"));
        token50.setToken(50);

        ArrayList<AFN> automatas = new ArrayList<AFN>();
        automatas.add(token10);
        automatas.add(token20);
        automatas.add(token30);
        automatas.add(token40);
        automatas.add(token50);
        token10.unirAL(automatas);

        AFD afd = new AFD();
        afd.convertirAFN(token10);

        lex = new AnalizadorLexico();

        lex.setAFD(afd);
        initComponents();
        //quitar si es que se puede implementar el monitoreo de acciones
        //realizadas por la funcion de evaluacion de cadena
        alturaProvisional = (int)jScrollPane3.getSize().getHeight();
        this.setSize(this.getWidth(), this.getHeight()-alturaProvisional);
        jScrollPane3.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtGramatica = new javax.swing.JTextArea();
        boxTabla = new javax.swing.JComboBox<>();
        btnGenerarTabla = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaLR = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaEval = new javax.swing.JTable();
        txtCadena = new javax.swing.JTextField();
        btnEvaluar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        txtGramatica.setColumns(20);
        txtGramatica.setRows(5);
        jScrollPane1.setViewportView(txtGramatica);

        boxTabla.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LR0", "LR1" }));
        boxTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxTablaActionPerformed(evt);
            }
        });

        btnGenerarTabla.setText("generar");
        btnGenerarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarTablaActionPerformed(evt);
            }
        });

        tablaLR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaLR);

        tablaEval.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Pila", "Cadena", "Accion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaEval);

        btnEvaluar.setText("Evaluar");
        btnEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvaluarActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Gramatica");

        jLabel2.setText("Tabla");

        jLabel3.setText("Ingrese cadena de prueba");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boxTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGenerarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(278, 278, 278))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnEvaluar)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(157, 157, 157)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(325, 325, 325)
                                .addComponent(txtCadena, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(351, 351, 351)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(boxTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGenerarTabla)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCadena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEvaluar)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarTablaActionPerformed
        String texto = txtGramatica.getText();
        String textoNuevo;
        if(texto.equals("")){
            JOptionPane.showMessageDialog(null, "No dejar campo vacio", "Error", JOptionPane.ERROR_MESSAGE);  
        }else{

            textoNuevo = texto.replaceAll("\n", "");
            lex.setCadena(textoNuevo);
            GramaticaDeGramaticas gr = new GramaticaDeGramaticas(lex);
            ListaDeListas prueba = gr.analizar();
            
            if(boxTabla.getSelectedIndex() == 0){
                this.lr0 = new LR0(prueba);
                this.lr1 = null;
                tablaDespliegue = this.lr0.tablaLR0();
                llenarTabla(tablaDespliegue, this.lr0.getColumnas());
            }else{
                this.lr1 = new LR1(prueba);
                this.lr0 = null;
                tablaDespliegue = this.lr1.tablaLR1();
                llenarTabla(tablaDespliegue, this.lr1.getColumnas());
            }
          
        }
    }//GEN-LAST:event_btnGenerarTablaActionPerformed

    
    public void llenarTabla(LinkedList<String []> datos, String[] columnas) {
        Object[][] modeloTabla = new Object[datos.size()][datos.get(0).length];
        int f = 0, c = 0;
        //se recorren filas y columnas del arraylist
        for (String[] filas : datos) {
            for(String s: filas){
                modeloTabla[f][c] = (Object)s;
                c++;
            }
            c = 0;
            f++;
        }
        tablaLR.setModel(
                new javax.swing.table.DefaultTableModel(modeloTabla, columnas));
    }    

    public void llenarTablaEval(LinkedList<String []> datos) {
        try{
        String[] cols = {"pila","cadena","accion"};
        Object[][] modeloTabla = new Object[datos.size()][datos.get(0).length];
        int f = 0, c = 0;
        //se recorren filas y columnas del arraylist
        for (String[] filas : datos) {
            for(String s: filas){
                modeloTabla[f][c] = (Object)s;
                c++;
            }
            c = 0;
            f++;
        }
        tablaEval.setModel(
                new javax.swing.table.DefaultTableModel(modeloTabla, cols));
        }catch(Exception e){
        }
    }    
    
    private void boxTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxTablaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxTablaActionPerformed

    private void btnEvaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvaluarActionPerformed
        if(!jScrollPane3.isVisible()){
            this.setSize(this.getWidth(), this.getHeight()+alturaProvisional);
            jScrollPane3.setVisible(true);
        }
        String valorCadena = txtCadena.getText();
        valorCadena = valorCadena.replaceAll(" ", "");
        LinkedList<String[]> datosSegundaTabla = new LinkedList<>();
        int respuesta = -3;
        if(valorCadena.equals("")){
            JOptionPane.showMessageDialog(null, "No dejar campo vacio", "Error", JOptionPane.ERROR_MESSAGE);  
        }else{
            if(lr0 != null){
                respuesta = lr0.analizarCadena(valorCadena,datosSegundaTabla);
                llenarTablaEval(datosSegundaTabla);
            }else if(lr1 != null){
                respuesta = lr1.analizarCadena(valorCadena,datosSegundaTabla);
                llenarTablaEval(datosSegundaTabla);
            }
            if(respuesta == 0){
                JOptionPane.showMessageDialog(null, "Cadena aceptada", "Correcto", JOptionPane.INFORMATION_MESSAGE);  
            }else{
                JOptionPane.showMessageDialog(null, "Cadena no fue aceptada", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEvaluarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxTabla;
    private javax.swing.JButton btnEvaluar;
    private javax.swing.JButton btnGenerarTabla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tablaEval;
    private javax.swing.JTable tablaLR;
    private javax.swing.JTextField txtCadena;
    private javax.swing.JTextArea txtGramatica;
    // End of variables declaration//GEN-END:variables
}
